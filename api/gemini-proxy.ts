import type { VercelRequest, VercelResponse } from '@vercel/node';
import { GoogleGenAI, Type } from "@google/genai";

// This function will be deployed as a Vercel Serverless Function.
export default async function handler(
  req: VercelRequest,
  res: VercelResponse,
) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }

  const apiKey = process.env.API_KEY;
  if (!apiKey) {
    return res.status(500).json({ error: 'API key not configured.' });
  }

  const ai = new GoogleGenAI({ apiKey });

  const { type, payload } = req.body;

  try {
    if (type === 'recipes') {
      const { ingredients } = payload;
      if (!ingredients) {
          return res.status(400).json({ error: 'Missing ingredients in payload' });
      }

      const recipeSchema = {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            recipeName: {
              type: Type.STRING,
              description: "The name of the recipe.",
            },
            description: {
              type: Type.STRING,
              description: "A short, enticing description of the recipe.",
            },
            ingredients: {
              type: Type.ARRAY,
              items: { type: Type.STRING },
              description: "A list of all ingredients required for the recipe, including amounts.",
            },
            instructions: {
              type: Type.ARRAY,
              items: { type: Type.STRING },
              description: "Step-by-step instructions to prepare the dish.",
            },
          },
          required: ["recipeName", "description", "ingredients", "instructions"],
        },
      };

      const prompt = `You are an expert chef who creates simple and delicious recipes. Based on these ingredients: ${ingredients}, generate 3 distinct recipes. Ensure the recipes are easy to follow for a home cook. Provide a name, a short description, a list of all ingredients with amounts, and clear instructions for each.`;
      
      const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
          responseMimeType: "application/json",
          responseSchema: recipeSchema,
        },
      });

      const responseText = response.text.trim();
      const recipes = JSON.parse(responseText);
      return res.status(200).json(recipes);

    } else if (type === 'image') {
      const { recipeName, description } = payload;
       if (!recipeName || !description) {
          return res.status(400).json({ error: 'Missing recipeName or description in payload' });
      }

      const prompt = `A delicious, professional food photograph of "${recipeName}". ${description}. The image should be vibrant, appetizing, and well-lit, suitable for a recipe card.`;
      
      const response = await ai.models.generateImages({
          model: 'imagen-4.0-generate-001',
          prompt: prompt,
          config: {
            numberOfImages: 1,
            outputMimeType: 'image/jpeg',
            aspectRatio: '4:3',
          },
      });
  
      if (response.generatedImages && response.generatedImages.length > 0) {
        const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
        const imageUrl = `data:image/jpeg;base64,${base64ImageBytes}`;
        return res.status(200).json({ imageUrl });
      } else {
        throw new Error("No image was generated by the API.");
      }

    } else {
      return res.status(400).json({ error: 'Invalid request type.' });
    }
  } catch (error: any) {
    console.error('Error calling Gemini API:', error);
    return res.status(500).json({ error: 'Failed to process request via Gemini API.', details: error.message });
  }
}
