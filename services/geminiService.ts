import { GoogleGenAI, Type } from "@google/genai";
import type { Recipe } from "../types";

// FIX: Use non-null assertion for API key as per guidelines, assuming it is always present.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

const recipeSchema = {
  type: Type.ARRAY,
  items: {
    type: Type.OBJECT,
    properties: {
      recipeName: {
        type: Type.STRING,
        description: "The name of the recipe.",
      },
      description: {
        type: Type.STRING,
        description: "A short, enticing description of the recipe.",
      },
      ingredients: {
        type: Type.ARRAY,
        items: {
          type: Type.STRING,
        },
        description: "A list of all ingredients required for the recipe, including amounts.",
      },
      instructions: {
        type: Type.ARRAY,
        items: {
          type: Type.STRING,
        },
        description: "Step-by-step instructions to prepare the dish.",
      },
    },
    required: ["recipeName", "description", "ingredients", "instructions"],
  },
};

export const generateRecipes = async (ingredients: string): Promise<Recipe[]> => {
  // FIX: Removed API key existence check as per guidelines, which state to assume it's pre-configured.
  const prompt = `You are an expert chef who creates simple and delicious recipes. Based on these ingredients: ${ingredients}, generate 3 distinct recipes. Ensure the recipes are easy to follow for a home cook. Provide a name, a short description, a list of all ingredients with amounts, and clear instructions for each.`;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: recipeSchema,
      },
    });

    const responseText = response.text.trim();
    const recipes: Recipe[] = JSON.parse(responseText);
    return recipes;

  } catch (error) {
    console.error("Error generating recipes:", error);
    throw new Error("Failed to generate recipes. The model may be unable to process the request.");
  }
};

export const generateImageForRecipe = async (recipeName: string, description: string): Promise<string> => {
  try {
    const prompt = `A delicious, professional food photograph of "${recipeName}". ${description}. The image should be vibrant, appetizing, and well-lit, suitable for a recipe card.`;
    
    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '4:3',
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }

  } catch (error) {
    console.error(`Error generating image for recipe "${recipeName}":`, error);
    throw new Error(`Failed to generate an image for ${recipeName}.`);
  }
};
